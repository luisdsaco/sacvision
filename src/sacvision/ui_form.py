# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'form.ui'
##
## Created by: Qt User Interface Compiler version 6.7.0
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QApplication, QGraphicsView, QHBoxLayout, QLabel,
    QMainWindow, QMenu, QMenuBar, QSizePolicy,
    QStatusBar, QToolBar, QVBoxLayout, QWidget)

from sacvision.histowidget import SacHistoWidget
from . import sacvision_rc

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(800, 723)
        icon = QIcon()
        icon.addFile(u":/images/mainlogo.png", QSize(), QIcon.Normal, QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.actionNew = QAction(MainWindow)
        self.actionNew.setObjectName(u"actionNew")
        icon1 = QIcon(QIcon.fromTheme(u"document-new"))
        self.actionNew.setIcon(icon1)
        self.actionOpen = QAction(MainWindow)
        self.actionOpen.setObjectName(u"actionOpen")
        icon2 = QIcon(QIcon.fromTheme(u"document-open"))
        self.actionOpen.setIcon(icon2)
        self.actionSave = QAction(MainWindow)
        self.actionSave.setObjectName(u"actionSave")
        icon3 = QIcon(QIcon.fromTheme(u"document-save"))
        self.actionSave.setIcon(icon3)
        self.actionSave_As = QAction(MainWindow)
        self.actionSave_As.setObjectName(u"actionSave_As")
        icon4 = QIcon(QIcon.fromTheme(u"document-save-as"))
        self.actionSave_As.setIcon(icon4)
        self.actionClose = QAction(MainWindow)
        self.actionClose.setObjectName(u"actionClose")
        icon5 = QIcon(QIcon.fromTheme(u"folder"))
        self.actionClose.setIcon(icon5)
        self.actionExit = QAction(MainWindow)
        self.actionExit.setObjectName(u"actionExit")
        icon6 = QIcon(QIcon.fromTheme(u"application-exit"))
        self.actionExit.setIcon(icon6)
        self.actionAboutQt = QAction(MainWindow)
        self.actionAboutQt.setObjectName(u"actionAboutQt")
        icon7 = QIcon(QIcon.fromTheme(u"applications-utilities"))
        self.actionAboutQt.setIcon(icon7)
        self.actionAbout = QAction(MainWindow)
        self.actionAbout.setObjectName(u"actionAbout")
        icon8 = QIcon(QIcon.fromTheme(u"help-about"))
        self.actionAbout.setIcon(icon8)
        self.actionLicense = QAction(MainWindow)
        self.actionLicense.setObjectName(u"actionLicense")
        icon9 = QIcon(QIcon.fromTheme(u"applications-development"))
        self.actionLicense.setIcon(icon9)
        self.actionCopy = QAction(MainWindow)
        self.actionCopy.setObjectName(u"actionCopy")
        self.actionCopy.setCheckable(True)
        self.actionCopy.setChecked(False)
        self.actionCopy.setEnabled(True)
        icon10 = QIcon(QIcon.fromTheme(u"edit-copy"))
        self.actionCopy.setIcon(icon10)
        self.actionStart = QAction(MainWindow)
        self.actionStart.setObjectName(u"actionStart")
        icon11 = QIcon(QIcon.fromTheme(u"media-playback-start"))
        self.actionStart.setIcon(icon11)
        self.actionStop = QAction(MainWindow)
        self.actionStop.setObjectName(u"actionStop")
        icon12 = QIcon(QIcon.fromTheme(u"media-playback-stop"))
        self.actionStop.setIcon(icon12)
        self.actionLibraries = QAction(MainWindow)
        self.actionLibraries.setObjectName(u"actionLibraries")
        icon13 = QIcon(QIcon.fromTheme(u"drive-harddisk"))
        self.actionLibraries.setIcon(icon13)
        self.actionEdge_Detection = QAction(MainWindow)
        self.actionEdge_Detection.setObjectName(u"actionEdge_Detection")
        self.actionEdge_Detection.setCheckable(True)
        self.actionEdge_Detection.setEnabled(True)
        icon14 = QIcon(QIcon.fromTheme(u"network-wireless"))
        self.actionEdge_Detection.setIcon(icon14)
        self.actionSmooth = QAction(MainWindow)
        self.actionSmooth.setObjectName(u"actionSmooth")
        self.actionSmooth.setCheckable(True)
        self.actionSmooth.setEnabled(True)
        icon15 = QIcon(QIcon.fromTheme(u"image-x-generic"))
        self.actionSmooth.setIcon(icon15)
        self.actionComplex = QAction(MainWindow)
        self.actionComplex.setObjectName(u"actionComplex")
        self.actionComplex.setCheckable(True)
        self.actionComplex.setEnabled(True)
        icon16 = QIcon(QIcon.fromTheme(u"view-restore"))
        self.actionComplex.setIcon(icon16)
        self.actionFFT = QAction(MainWindow)
        self.actionFFT.setObjectName(u"actionFFT")
        self.actionFFT.setCheckable(True)
        self.actionFFT.setEnabled(True)
        icon17 = QIcon(QIcon.fromTheme(u"utilities-system-monitor"))
        self.actionFFT.setIcon(icon17)
        self.actionAcquire = QAction(MainWindow)
        self.actionAcquire.setObjectName(u"actionAcquire")
        self.actionAcquire.setCheckable(True)
        icon18 = QIcon(QIcon.fromTheme(u"camera-web"))
        self.actionAcquire.setIcon(icon18)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.horizontalLayout = QHBoxLayout()
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.label = QLabel(self.centralwidget)
        self.label.setObjectName(u"label")
        self.label.setPixmap(QPixmap(u":/images/logo.png"))

        self.horizontalLayout.addWidget(self.label)

        self.widget = SacHistoWidget(self.centralwidget)
        self.widget.setObjectName(u"widget")
        sizePolicy = QSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setMinimumSize(QSize(100, 100))

        self.horizontalLayout.addWidget(self.widget)


        self.verticalLayout.addLayout(self.horizontalLayout)

        self.graphicsView = QGraphicsView(self.centralwidget)
        self.graphicsView.setObjectName(u"graphicsView")
        sizePolicy1 = QSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.graphicsView.sizePolicy().hasHeightForWidth())
        self.graphicsView.setSizePolicy(sizePolicy1)
        self.graphicsView.setMinimumSize(QSize(512, 512))

        self.verticalLayout.addWidget(self.graphicsView)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 800, 23))
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuHelp = QMenu(self.menubar)
        self.menuHelp.setObjectName(u"menuHelp")
        self.menuOperations = QMenu(self.menubar)
        self.menuOperations.setObjectName(u"menuOperations")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QToolBar(MainWindow)
        self.toolBar.setObjectName(u"toolBar")
        MainWindow.addToolBar(Qt.ToolBarArea.TopToolBarArea, self.toolBar)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuOperations.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addAction(self.actionClose)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuHelp.addAction(self.actionAbout)
        self.menuHelp.addAction(self.actionAboutQt)
        self.menuHelp.addAction(self.actionLicense)
        self.menuHelp.addAction(self.actionLibraries)
        self.menuOperations.addAction(self.actionStart)
        self.menuOperations.addAction(self.actionStop)
        self.menuOperations.addSeparator()
        self.menuOperations.addAction(self.actionAcquire)
        self.menuOperations.addSeparator()
        self.menuOperations.addAction(self.actionCopy)
        self.menuOperations.addAction(self.actionEdge_Detection)
        self.menuOperations.addAction(self.actionSmooth)
        self.menuOperations.addAction(self.actionFFT)
        self.menuOperations.addAction(self.actionComplex)
        self.toolBar.addAction(self.actionNew)
        self.toolBar.addAction(self.actionOpen)
        self.toolBar.addAction(self.actionSave)
        self.toolBar.addAction(self.actionSave_As)
        self.toolBar.addAction(self.actionClose)
        self.toolBar.addAction(self.actionExit)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionStart)
        self.toolBar.addAction(self.actionStop)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionAcquire)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionCopy)
        self.toolBar.addAction(self.actionSmooth)
        self.toolBar.addAction(self.actionEdge_Detection)
        self.toolBar.addAction(self.actionComplex)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionAbout)

        self.retranslateUi(MainWindow)
        self.actionExit.triggered.connect(MainWindow.close)

        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"Sacvision 0.1.1", None))
        self.actionNew.setText(QCoreApplication.translate("MainWindow", u"New", None))
#if QT_CONFIG(statustip)
        self.actionNew.setStatusTip(QCoreApplication.translate("MainWindow", u"Work with the default image", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionNew.setWhatsThis(QCoreApplication.translate("MainWindow", u"Work with the default image", None))
#endif // QT_CONFIG(whatsthis)
        self.actionOpen.setText(QCoreApplication.translate("MainWindow", u"Open", None))
#if QT_CONFIG(statustip)
        self.actionOpen.setStatusTip(QCoreApplication.translate("MainWindow", u"Open an image to work with", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionOpen.setWhatsThis(QCoreApplication.translate("MainWindow", u"Open an image to work with", None))
#endif // QT_CONFIG(whatsthis)
        self.actionSave.setText(QCoreApplication.translate("MainWindow", u"Save", None))
#if QT_CONFIG(statustip)
        self.actionSave.setStatusTip(QCoreApplication.translate("MainWindow", u"Save the current image", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionSave.setWhatsThis(QCoreApplication.translate("MainWindow", u"Save the current image", None))
#endif // QT_CONFIG(whatsthis)
        self.actionSave_As.setText(QCoreApplication.translate("MainWindow", u"Save As..", None))
#if QT_CONFIG(statustip)
        self.actionSave_As.setStatusTip(QCoreApplication.translate("MainWindow", u"Set a name and save the image", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionSave_As.setWhatsThis(QCoreApplication.translate("MainWindow", u"Set a name and save the image", None))
#endif // QT_CONFIG(whatsthis)
        self.actionClose.setText(QCoreApplication.translate("MainWindow", u"Close", None))
#if QT_CONFIG(statustip)
        self.actionClose.setStatusTip(QCoreApplication.translate("MainWindow", u"Close the work with the image", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionClose.setWhatsThis(QCoreApplication.translate("MainWindow", u"Close the work with the image", None))
#endif // QT_CONFIG(whatsthis)
        self.actionExit.setText(QCoreApplication.translate("MainWindow", u"Exit", None))
#if QT_CONFIG(statustip)
        self.actionExit.setStatusTip(QCoreApplication.translate("MainWindow", u"Go back to the OS", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionExit.setWhatsThis(QCoreApplication.translate("MainWindow", u"Go back to the OS", None))
#endif // QT_CONFIG(whatsthis)
        self.actionAboutQt.setText(QCoreApplication.translate("MainWindow", u"AboutQt", None))
#if QT_CONFIG(tooltip)
        self.actionAboutQt.setToolTip(QCoreApplication.translate("MainWindow", u"Show the Qt License", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionAboutQt.setStatusTip(QCoreApplication.translate("MainWindow", u"Show the Qt License", None))
#endif // QT_CONFIG(statustip)
        self.actionAbout.setText(QCoreApplication.translate("MainWindow", u"About", None))
#if QT_CONFIG(tooltip)
        self.actionAbout.setToolTip(QCoreApplication.translate("MainWindow", u"About Sacvision", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionAbout.setStatusTip(QCoreApplication.translate("MainWindow", u"About Sacvision", None))
#endif // QT_CONFIG(statustip)
        self.actionLicense.setText(QCoreApplication.translate("MainWindow", u"License", None))
#if QT_CONFIG(tooltip)
        self.actionLicense.setToolTip(QCoreApplication.translate("MainWindow", u"Show the license to use Sacvision", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionLicense.setStatusTip(QCoreApplication.translate("MainWindow", u"Show the license th use Sacvision", None))
#endif // QT_CONFIG(statustip)
        self.actionCopy.setText(QCoreApplication.translate("MainWindow", u"Copy", None))
#if QT_CONFIG(tooltip)
        self.actionCopy.setToolTip(QCoreApplication.translate("MainWindow", u"Copy the input image to the output one", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionCopy.setStatusTip(QCoreApplication.translate("MainWindow", u"Copy the input image to the output one", None))
#endif // QT_CONFIG(statustip)
        self.actionStart.setText(QCoreApplication.translate("MainWindow", u"Start", None))
#if QT_CONFIG(tooltip)
        self.actionStart.setToolTip(QCoreApplication.translate("MainWindow", u"Start the selected processing", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionStart.setStatusTip(QCoreApplication.translate("MainWindow", u"Start the selected processing", None))
#endif // QT_CONFIG(statustip)
        self.actionStop.setText(QCoreApplication.translate("MainWindow", u"Stop", None))
#if QT_CONFIG(tooltip)
        self.actionStop.setToolTip(QCoreApplication.translate("MainWindow", u"Stop the selected processing", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionStop.setStatusTip(QCoreApplication.translate("MainWindow", u"Stop the selected processing", None))
#endif // QT_CONFIG(statustip)
        self.actionLibraries.setText(QCoreApplication.translate("MainWindow", u"Libraries", None))
        self.actionEdge_Detection.setText(QCoreApplication.translate("MainWindow", u"Edge Detection", None))
#if QT_CONFIG(tooltip)
        self.actionEdge_Detection.setToolTip(QCoreApplication.translate("MainWindow", u"Apply and edge detection filter", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionEdge_Detection.setStatusTip(QCoreApplication.translate("MainWindow", u"Apply and edge detection filter", None))
#endif // QT_CONFIG(statustip)
        self.actionSmooth.setText(QCoreApplication.translate("MainWindow", u"Smooth", None))
        self.actionSmooth.setIconText(QCoreApplication.translate("MainWindow", u"Smooth the input image", None))
#if QT_CONFIG(tooltip)
        self.actionSmooth.setToolTip(QCoreApplication.translate("MainWindow", u"Smooth the imput image", None))
#endif // QT_CONFIG(tooltip)
        self.actionComplex.setText(QCoreApplication.translate("MainWindow", u"Complex", None))
#if QT_CONFIG(tooltip)
        self.actionComplex.setToolTip(QCoreApplication.translate("MainWindow", u"Apply a complex filter", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionComplex.setStatusTip(QCoreApplication.translate("MainWindow", u"Apply a complex filter", None))
#endif // QT_CONFIG(statustip)
        self.actionFFT.setText(QCoreApplication.translate("MainWindow", u"FFT", None))
#if QT_CONFIG(tooltip)
        self.actionFFT.setToolTip(QCoreApplication.translate("MainWindow", u"Show the FFT of the image", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionFFT.setStatusTip(QCoreApplication.translate("MainWindow", u"Show the FFT of the image", None))
#endif // QT_CONFIG(statustip)
        self.actionAcquire.setText(QCoreApplication.translate("MainWindow", u"Acquire", None))
#if QT_CONFIG(tooltip)
        self.actionAcquire.setToolTip(QCoreApplication.translate("MainWindow", u"Acquire an image from the camera", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionAcquire.setStatusTip(QCoreApplication.translate("MainWindow", u"Acquire an image from the camera", None))
#endif // QT_CONFIG(statustip)
        self.label.setText("")
        self.menuFile.setTitle(QCoreApplication.translate("MainWindow", u"File", None))
        self.menuHelp.setTitle(QCoreApplication.translate("MainWindow", u"Help", None))
        self.menuOperations.setTitle(QCoreApplication.translate("MainWindow", u"Operations", None))
        self.toolBar.setWindowTitle(QCoreApplication.translate("MainWindow", u"toolBar", None))
    # retranslateUi

